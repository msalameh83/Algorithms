__author__ = 'Mohammad'

"""
Given an array of integers where each element represents the max number of steps that
can be made forward from that element. Write a function to return the minimum number
of jumps to reach the end of the array (starting from the first element).
If an element is 0, then cannot move through that element.

Time Complexity: O(n^2)

Example:

Input: arr = [2, 3, 1, 1, 2, 4, 2, 0, 1, 1]
Output: 4 (1-> 4 -> 5 ->9)

num_of_jumps[i] saves the number of jumps needed from actual_jumps[i]

i j  num_of_jumps                   actual_jumps
1 0 [0, 1,  ,  ,  ,  ,  ,  ,  ,  ] [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
2 0 [0, 1, 1,  ,  ,  ,  ,  ,  ,  ] [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
2 1 [0, 1, 1,  ,  ,  ,  ,  ,  ,  ] [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
3 0 [0, 1, 1,  ,  ,  ,  ,  ,  ,  ] [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
3 1 [0, 1, 1, 2,  ,  ,  ,  ,  ,  ] [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]

for i= 3 and j=1,, we check if we can reach i from j.
Since we can move 3 steps from j=1 to reach 4, and i=3, then we can reach i.
if  1 + num_of_jumps[j] < num_of_jumps[i], then we can update the num_of_jumps[i]
to the new minimum which is 1 + num_of_jumps[j]

3 2 [0, 1, 1, 2,  ,  ,  ,  ,  ,  ] [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]
4 0 [0, 1, 1, 2,  ,  ,  ,  ,  ,  ] [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]
4 1 [0, 1, 1, 2, 2,  ,  ,  ,  ,  ] [0, 0, 0, 1, 1, 0, 0, 0, 0, 0]
4 2 [0, 1, 1, 2, 2,  ,  ,  ,  ,  ] [0, 0, 0, 1, 1, 0, 0, 0, 0, 0]
4 3 [0, 1, 1, 2, 2,  ,  ,  ,  ,  ] [0, 0, 0, 1, 1, 0, 0, 0, 0, 0]
5 0 [0, 1, 1, 2, 2,  ,  ,  ,  ,  ] [0, 0, 0, 1, 1, 0, 0, 0, 0, 0]
5 1 [0, 1, 1, 2, 2,  ,  ,  ,  ,  ] [0, 0, 0, 1, 1, 0, 0, 0, 0, 0]
5 2 [0, 1, 1, 2, 2,  ,  ,  ,  ,  ] [0, 0, 0, 1, 1, 0, 0, 0, 0, 0]
5 3 [0, 1, 1, 2, 2,  ,  ,  ,  ,  ] [0, 0, 0, 1, 1, 0, 0, 0, 0, 0]
5 4 [0, 1, 1, 2, 2, 3,  ,  ,  ,  ] [0, 0, 0, 1, 1, 4, 0, 0, 0, 0]
6 0 [0, 1, 1, 2, 2, 3,  ,  ,  ,  ] [0, 0, 0, 1, 1, 4, 0, 0, 0, 0]
6 1 [0, 1, 1, 2, 2, 3,  ,  ,  ,  ] [0, 0, 0, 1, 1, 4, 0, 0, 0, 0]
6 2 [0, 1, 1, 2, 2, 3,  ,  ,  ,  ] [0, 0, 0, 1, 1, 4, 0, 0, 0, 0]
6 3 [0, 1, 1, 2, 2, 3,  ,  ,  ,  ] [0, 0, 0, 1, 1, 4, 0, 0, 0, 0]
6 4 [0, 1, 1, 2, 2, 3, 3,  ,  ,  ] [0, 0, 0, 1, 1, 4, 4, 0, 0, 0]
6 5 [0, 1, 1, 2, 2, 3, 3,  ,  ,  ] [0, 0, 0, 1, 1, 4, 4, 0, 0, 0]
7 0 [0, 1, 1, 2, 2, 3, 3,  ,  ,  ] [0, 0, 0, 1, 1, 4, 4, 0, 0, 0]
7 1 [0, 1, 1, 2, 2, 3, 3,  ,  ,  ] [0, 0, 0, 1, 1, 4, 4, 0, 0, 0]
7 2 [0, 1, 1, 2, 2, 3, 3,  ,  ,  ] [0, 0, 0, 1, 1, 4, 4, 0, 0, 0]
7 3 [0, 1, 1, 2, 2, 3, 3,  ,  ,  ] [0, 0, 0, 1, 1, 4, 4, 0, 0, 0]
7 4 [0, 1, 1, 2, 2, 3, 3,  ,  ,  ] [0, 0, 0, 1, 1, 4, 4, 0, 0, 0]
7 5 [0, 1, 1, 2, 2, 3, 3, 4,  ,  ] [0, 0, 0, 1, 1, 4, 4, 5, 0, 0]
7 6 [0, 1, 1, 2, 2, 3, 3, 4,  ,  ] [0, 0, 0, 1, 1, 4, 4, 5, 0, 0]
8 0 [0, 1, 1, 2, 2, 3, 3, 4,  ,  ] [0, 0, 0, 1, 1, 4, 4, 5, 0, 0]
8 1 [0, 1, 1, 2, 2, 3, 3, 4,  ,  ] [0, 0, 0, 1, 1, 4, 4, 5, 0, 0]
8 2 [0, 1, 1, 2, 2, 3, 3, 4,  ,  ] [0, 0, 0, 1, 1, 4, 4, 5, 0, 0]
8 3 [0, 1, 1, 2, 2, 3, 3, 4,  ,  ] [0, 0, 0, 1, 1, 4, 4, 5, 0, 0]
8 4 [0, 1, 1, 2, 2, 3, 3, 4,  ,  ] [0, 0, 0, 1, 1, 4, 4, 5, 0, 0]
8 5 [0, 1, 1, 2, 2, 3, 3, 4, 4,  ] [0, 0, 0, 1, 1, 4, 4, 5, 5, 0]
8 6 [0, 1, 1, 2, 2, 3, 3, 4, 4,  ] [0, 0, 0, 1, 1, 4, 4, 5, 5, 0]
8 7 [0, 1, 1, 2, 2, 3, 3, 4, 4,  ] [0, 0, 0, 1, 1, 4, 4, 5, 5, 0]
9 0 [0, 1, 1, 2, 2, 3, 3, 4, 4,  ] [0, 0, 0, 1, 1, 4, 4, 5, 5, 0]
9 1 [0, 1, 1, 2, 2, 3, 3, 4, 4,  ] [0, 0, 0, 1, 1, 4, 4, 5, 5, 0]
9 2 [0, 1, 1, 2, 2, 3, 3, 4, 4,  ] [0, 0, 0, 1, 1, 4, 4, 5, 5, 0]
9 3 [0, 1, 1, 2, 2, 3, 3, 4, 4,  ] [0, 0, 0, 1, 1, 4, 4, 5, 5, 0]
9 4 [0, 1, 1, 2, 2, 3, 3, 4, 4,  ] [0, 0, 0, 1, 1, 4, 4, 5, 5, 0]
9 5 [0, 1, 1, 2, 2, 3, 3, 4, 4, 4] [0, 0, 0, 1, 1, 4, 4, 5, 5, 5]
9 6 [0, 1, 1, 2, 2, 3, 3, 4, 4, 4] [0, 0, 0, 1, 1, 4, 4, 5, 5, 5]
9 7 [0, 1, 1, 2, 2, 3, 3, 4, 4, 4] [0, 0, 0, 1, 1, 4, 4, 5, 5, 5]
9 8 [0, 1, 1, 2, 2, 3, 3, 4, 4, 4] [0, 0, 0, 1, 1, 4, 4, 5, 5, 5]

[9, 5, 4, 1]
"""

import sys
def min_jumps_to_reach_end(arr):
    num_of_jumps = [sys.maxsize]* len(arr)
    actual_jumps = [0]* len(arr)

    num_of_jumps[0] = 0

    for i in range(1, len(arr)):
        for j in range(i):
            if arr[j] + j >= i:
                if 1 + num_of_jumps[j] < num_of_jumps[i]:
                    num_of_jumps[i] = 1 + num_of_jumps[j]
                    actual_jumps[i] = j
            print (i, j, num_of_jumps,actual_jumps )

    print(num_of_jumps)
    print(actual_jumps)

    steps=[]
    i = len(actual_jumps) - 1
    while i > 0:
        steps.append(i)
        i = actual_jumps[i]

    print(steps)





arr = [2, 3, 1, 1, 2, 4, 2, 0, 1, 1]
min_jumps_to_reach_end(arr)